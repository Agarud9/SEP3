@page "/CustomerFarmOverview/{FarmName}"
@attribute [Authorize(Roles = "customer")] 

@using HttpClient.ClientInterfaces
@using Components
@using global::Shared.Models
@using global::Shared.DTOs
@inject IFarmService farmHttpClient;
@inject IOfferService offerHttpClient;
@inject NavigationManager navMgr;
@using Components


<AuthorizeView>
<div id="shape">
    <div id="circle">
        <img id="farmImg" src="@Farm?.FarmIcon?.AbsoluteUrl" height="180" width="180">
    </div>
    <div id="rectangle">
        <label id="farmName">@FarmName</label>
    </div>
</div>

    <div class="container">
        <div class="row">
            <div class="col-4" id="reviews" style="display: flex; justify-content: center">
                <Reviews CurrentUser="@context.User.Identity.Name" FarmName="@FarmName"></Reviews>
            </div>
            
            <div class="col-4" id="status">
                <h5 id="statusLabel">Status:</h5>
                <label id="statusText" >@Farm?.FarmStatus</label>
            </div>
            
            <div class="col-4" id="updateContainer">
                    <div id="phone">
                        <p id="phoneLabel">Phone number: @Farm?.Phone </p>
                        <p id="addressLabel">@Farm?.Address</p>
                    </div>
                </div>
        </div>
    </div>
    

<div class="offers">
    @if (offers == null)
    {
        <p>
            <em>Loading offers...</em>
        </p>
    }

@if(offers != null) 
{
    <div class="d-flex justify-content-around flex-wrap" id="ordersContainer">
        @foreach (var offer in offers)
        {
            <div class="card col-5 m-3 position-relative">
                <div class="card-header">
                    <img src="@offer.Image.AbsoluteUrl" alt="offerImage" class="center card-img"/>
                </div>
                <div class="card-body d-flex justify-content-between flex-wrap">
                    <h5 class="col-8">@offer.Name</h5>
                <h6 class="col-4 d-flex justify-content-end">Price: @offer.Price dkk </h6>
                    <span class="col-8">@offer.Description</span>
                    <h6 class="col-4 d-flex justify-content-end">Unit: @offer.Unit</h6>
                </div>
            </div>
            @*<OfferSimple Name="@offer.Name"
                         Price="@offer.Price" 
                         Description="@offer.Description" 
                         ImageUrl="@offer.Image.AbsoluteUrl"
                         OnClick="@(() => {  })"
                         DisplayButton="@false"
            ></OfferSimple>*@
            }
        </div>
    }
    <span>@msg</span>
</div>
</AuthorizeView>
@code {
    //get the farm from the previous view
    [Parameter] 
    public string FarmName {get;set;}
    private  Farm Farm {get;set;}
    private string msg = "";
    private IEnumerable<Offer> offers {get;set;}

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Farm = await farmHttpClient.GetFarmByNameAsync(FarmName);
            Console.WriteLine($"Farm name:       {Farm.Name}");
            offers = await offerHttpClient.GetAsync(FarmName);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    

}