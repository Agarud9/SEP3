@page "/DisplayOffers"
@attribute [Authorize(Roles = "customer")] 

@using global::Shared.Models
@using HttpClient.ClientInterfaces
@inject IOfferService httpOfferClient
@inject ICartService HttpCartClient

<div style="text-align: center">
   <h3>DisplayOffers</h3> 
</div>

@if (offers == null)
{
    <p>
        <em>Loading...</em>
    </p>
}

@if(offers!=null){
    <div class="d-flex justify-content-around flex-wrap">
        @foreach (var offer in offers)
        {
            <div class="card col-5 m-3">
                <div class="card-header">
                    <img src="@offer.Image.AbsoluteUrl" alt="offerImage" width="100%" height="auto"/>
                </div>
                <div class="card-body d-flex justify-content-between flex-wrap">
                    <h5 class="col-8">@offer.Name</h5>
                    <h6 class="col-4 d-flex justify-content-end">@offer.Price</h6>
                    <span class="col-8">@offer.Description</span>
                </div>
                <button type="button" @onclick="() => OpenPopUpAddToCart(offer)"> Add
                </button>
            </div>
            @*<OfferSimple Name="@offer.Name"
                         Price="@offer.Price" 
                         Description="@offer.Description" 
                         ImageUrl="@offer.Image.AbsoluteUrl"
                         OnClick="@(() => OpenPopUpAddToCart(offer.Id))"
                         DisplayButton="@true"></OfferSimple>*@

        }
    </div>}


@if (!string.IsNullOrEmpty(msg))
{
    <div class="errorMsg">
        <span>@msg</span>
    </div>
}

@if (showAddToCartComponent)
{
     <div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
         <div class="modal-dialog">
             <div class="modal-content">
                 <div class="modal-header">
                     <h4 class="modal-title">Order info</h4>
                 </div>
            
                 <div class="container">
                     <div class="row" >
                         <div class="col-6">
                             <div class="quantity">
                                 <div class="col-6">
                                     <label>Quantity:<span class="required">*</span></label>
                                     <div class="col-6 d-flex flex-nowrap">
                                         <input type="text" @bind="quantity" required="required"/>
                                     </div>
                                 </div>
                             </div>
                         </div>
                         <div class="col-6">
                             <div class="delivery">
                                 <!--radio buttons for delivery option-->
                                 <label class="col-8" for="radioGroup">Delivery Option:<span class="required">*</span></label>
                                 <div id="radioGroup" class="d-flex flex-column">
                                     @if ((offer.CollectionOption & CollectionOption.Delivery) != 0)
                                     {
                                         <div class="col-8 d-flex flex-nowrap">
                                             <input type="radio" value="@delivery" id="delivery" name="deliveryOption" class="me-2"
                                                    onchange="@(() => Delivery())"
                                                    checked="@delivery"/>
                                             <label for="delivery"> Delivery</label>
                                         </div>
                                     }
                                     @if ((offer.CollectionOption & CollectionOption.PickUp) != 0)
                                     {
                                         <div class="col-8 d-flex flex-nowrap">
                                             <input type="radio" value="@pickUp" id="pickUp" name="deliveryOption" class="me-2"
                                                    onchange="@(() => PickUp())"/>
                                             <label for="pickUp"> Pick Up</label>
                                         </div> 
                                     }
                                     @if ((offer.CollectionOption & CollectionOption.PickYourOwn) != 0)
                                     {
                                         <div class="col-8 d-flex flex-nowrap">
                                             <label for="pickYO"> Pick Your Own</label>
                                         </div> 
                                     }
                                 </div>
                             </div>
                         </div>

                         @if (!string.IsNullOrEmpty(msg))
                         {
                             <div class="errorMsg" style="padding-top: 3%">
                                 <span>@msg</span>
                             </div>
                         }
                         
                         <div class="row" style="padding-bottom: 2%; padding-top: 3%">
                             <div class="col-6">
                                 <div class="buttons">
                                     <div class="col-4"><button class="cancel" @onclick="Cancel">CANCEL</button></div>
                                 </div>
                             </div>
                             <div class="col-6">
                                 <div class="buttons">
                                     <div class="col-"><button class="addToCartBtn" @onclick="AddToCart">ADD TO CART</button> </div>
                                 </div>
                             </div>
                         </div>
                     </div>
                 </div>
             </div>
         </div>
         </div>
    
}

@code {
    private IEnumerable<Offer>? offers;
    private string msg = "";
    private int quantity = 0;
    private bool delivery;
    private bool pickUp;
    private Offer offer;

    bool showAddToCartComponent;
    
    ///summary///
    /// loads all the offers
    /// summary///
    protected override async Task OnInitializedAsync()
    {
        try 
        {

    //this below will be used to get the offers from server 
              offers = await httpOfferClient.GetAsync();
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private void OpenPopUpAddToCart(Offer offer)
    {
        this.offer = offer;
        showAddToCartComponent = true;
    }

    private async Task AddToCart()
    {
        try
        {
            msg = "";
            if (quantity <= 0)
            {
                msg = "Quantity should be bigger than 0.";
                return;
            }
            if (delivery == false && pickUp == false)
            {
                msg = "Please choose collection option.";
                return;
            }
            CollectionOption collectionOption = delivery ? CollectionOption.Delivery : 0;
                             collectionOption |= pickUp ? CollectionOption.PickUp : 0;
            
            
            CartOfferDto dto = new()
            {
                Quantity = quantity,
                Username = "",
                CollectionOption = collectionOption,
                OfferId = offer.Id
            };
            
            
            await HttpCartClient.AddToCartAsync(dto);
            quantity = 0;
            delivery = false;
            pickUp = false;

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        showAddToCartComponent = false;
        StateHasChanged();
    }

    private Task Cancel()
    {
        msg = "";
        quantity = 0;
        delivery = false;
        pickUp = false;
        showAddToCartComponent = false;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    
    private async Task ValidateData()
    {
        
    }
    
    ///summary///
    /// sets the delivery boolean to true to simulate 'chosen from the radio'
    /// summary///
    private void Delivery()
    {
        delivery = true;
        pickUp = false;
    }

    ///summary///
    /// sets the pickUp boolean to true to simulate 'chosen from the radio'
    /// summary///
    private void PickUp()
    {
        delivery = false;
        pickUp = true;
    }


}
