@page "/DisplayOffers"
@attribute [Authorize(Roles = "customer")] 

@using global::Shared.Models
@using HttpClient.ClientInterfaces
@using Microsoft.AspNetCore.Authorization.Infrastructure
@using System.Security.Claims
@using Blazorise
@inject IOfferService httpOfferClient
@inject ICartService HttpCartClient

<div class="text">
    <h3 class="displayOffersText">Display Offers</h3>
</div>
<div id="filters">
    <div class="container">
        <div class="row">
            <div class="col-3 offset-md-1" id="distanceFilter">
                <span>
                    <label for="distance">Distance: </label>
                   <span class="distance-km-label">@distance km</span>
                    <input @bind="distance" type="range" name="distance" id="distance" class="distance-slider" min="0" max="100"  step="1" data-display-value="0 km" style="--width-ratio: 2/3; --margin-right-ratio: 1/3;"
                           onmousemove="this.setAttribute('data-display-value', this.value + ' km');this.style.setProperty('--translateX', this.value);">
                </span>
            </div>
            <div class="col-3" id="nameFilter">
                <span>
                    <label>Product: </label><input id="productInput" type="text" placeholder=" Name" @bind="nameContains"/>
                </span>
            </div>
            <div class="col-sm-1" id="deliveryFilter">
                <span>
                    <input type="checkbox" @onchange="CheckDelivery"/><label>Delivery</label>
                </span>
            </div>
            <div class="col-sm-1" id="pickUpFilter">
                <span>
                    <input type="checkbox" @onchange="CheckPickUp"/><label>Pick Up</label>
                </span>
            </div>
            <div class="col-sm-2" id="pickYOFilter">
                <span>
                    <input type="checkbox" @onchange="CheckPickYO"/><label>Pick Your Own</label>
                </span>
            </div>
            <div class="col-sm-1">
                <button id="searchButton" @onclick="SetOffers">
                    <img src="Img/search.png" width="25px" id="searchImg"/>
                </button>
            </div>
        </div>
    </div>
</div>

@if (offers == null)
{
    <p>
        <em>Loading...</em>
    </p>
}

@{// recommended offers
  }
@if (!IsFiltered())
{
    <div class="recommended-offers">
        <div class="recommended-title">
            <img src="Img/near-you.png" alt="" width="30px" height="30px">
            <h3>Near you: </h3>
        </div>
        <div class="d-flex justify-content-around flex-wrap">
                
                @foreach (var offer in recommendedOffers)
                {
                    <div class="card col-5 m-3">
                        <div class="card-header">
                            <img src="@offer.Image.AbsoluteUrl" alt="offerImage" width="100%" height="auto"/>
                        </div>
                        <div class="card-body d-flex justify-content-between flex-wrap">
                            <h5 class="col-8">@offer.Name</h5>
                            <h6 class="col-4 d-flex justify-content-end">@offer.Price</h6>
                            <span class="col-8">@offer.Description</span>
                        </div>
                        <button type="button" @onclick="() => OpenPopUpAddToCart(offer)">
                            Add
                        </button>
                    </div>
                }
            </div>
    </div>
    
}

@if (offers != null)
{
    
    <div class="d-flex justify-content-around flex-wrap">
        @foreach (var offer in offers)
        {
            <div class="card col-5 m-3">
                <div class="card-header">
                    <img src="@offer.Image.AbsoluteUrl" alt="offerImage" width="100%" height="auto"/>
                </div>
                <div class="card-body d-flex justify-content-between flex-wrap">
                    <h5 class="col-8">@offer.Name</h5>
                    <h6 class="col-4 d-flex justify-content-end">@offer.Price</h6>
                    <span class="col-8">@offer.Description</span>
                </div>
                <button type="button" @onclick="() => OpenPopUpAddToCart(offer)">
                    Add
                </button>
            </div>
        }
    </div>
}


@if (!string.IsNullOrEmpty(msg))
{
    <div class="errorMsg">
        <span>@msg</span>
    </div>
}

@if (showAddToCartComponent)
{
    <div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Order info</h4>
                </div>

                <div class="container">
                    <div class="row">
                        <div class="col-6">
                            <div class="quantity">
                                <div class="col-6">
                                    <label>Quantity:<span class="required">*</span></label>
                                    <div class="col-6 d-flex flex-nowrap">
                                        <input type="text" @bind="quantity" required="required"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="delivery">
                                <!--radio buttons for delivery option-->
                                <label class="col-8" for="radioGroup">Delivery Option:<span class="required">*</span></label>
                                <div id="radioGroup" class="d-flex flex-column">
                                    @if ((addToCartPopUpOffer.CollectionOption & CollectionOption.Delivery) != 0)
                                    {
                                        <div class="col-8 d-flex flex-nowrap">
                                            <input type="radio" value="@delivery" id="delivery" name="deliveryOption" class="me-2"
                                                   onchange="@(() => Delivery())"
                                                   checked="@delivery"/>
                                            <label for="delivery"> Delivery</label>
                                        </div>
                                    }
                                    @if ((addToCartPopUpOffer.CollectionOption & CollectionOption.PickUp) != 0)
                                    {
                                        <div class="col-8 d-flex flex-nowrap">
                                            <input type="radio" value="@pickUp" id="pickUp" name="deliveryOption" class="me-2"
                                                   onchange="@(() => PickUp())"/>
                                            <label for="pickUp"> Pick Up</label>
                                        </div>
                                    }
                                    @if ((addToCartPopUpOffer.CollectionOption & CollectionOption.PickYourOwn) != 0)
                                    {
                                        <div class="col-8 d-flex flex-nowrap">
                                            <label for="pickYO"> Pick Your Own</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(msg))
                        {
                            <div class="errorMsg" style="padding-top: 3%">
                                <span>@msg</span>
                            </div>
                        }

                        <div class="row" style="padding-bottom: 2%; padding-top: 3%">
                            <div class="col-6">
                                <div class="buttons">
                                    <div class="col-4">
                                        <button class="cancel" @onclick="Cancel">CANCEL</button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="buttons">
                                    <div class="col-">
                                        <button class="addToCartBtn" @onclick="AddToCart">ADD TO CART</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } =  null;
    
    private IEnumerable<Offer>? offers;
    private ICollection<Offer>? recommendedOffers;
    private string msg = "";
    private int quantity = 0;
    private bool delivery;
    private bool pickUp;
    private Offer addToCartPopUpOffer;

    bool showAddToCartComponent;

    //filtering
    private int? distance;
    private string? nameContains;
    private bool deliveryCheck;
    private bool pickUpCheck;
    private bool pickYOCheck;
    private string? username;

    private bool isFiltered = false;

    ///summary///
    /// loads all the offers
    /// summary///
    protected override async Task OnInitializedAsync()
    {
        distance = 0;
        recommendedOffers = await httpOfferClient.GetRecommendedOffers();
        await GetOffers();
    }

    private async Task GetOffers()
    {
        try
        {
            var offersTemp = await httpOfferClient.GetAsync(username,distance, nameContains, deliveryCheck, pickUpCheck, pickYOCheck);
            if (recommendedOffers is not null && !IsFiltered())
                offersTemp = offersTemp.Where(offer => recommendedOffers.All(offer1 => offer1.Id != offer.Id)).ToList();

            offers = offersTemp;
            isFiltered = IsFiltered();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        } 
    }
    private async Task SetOffers()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        username = user.Identity.Name;
        await GetOffers();
    }

    private void OpenPopUpAddToCart(Offer offer)
    {
        this.addToCartPopUpOffer = offer;
        showAddToCartComponent = true;
    }

    private bool IsFiltered() => !(distance == 0 &&
                                 string.IsNullOrEmpty(nameContains) && 
                                 !deliveryCheck && 
                                 !pickUpCheck &&
                                 !pickYOCheck &&
                                 recommendedOffers is not null);

    private async Task AddToCart()
    {
        try
        {
            msg = "";
            if (quantity <= 0)
            {
                msg = "Quantity should be bigger than 0.";
                return;
            }
            if (delivery == false && pickUp == false)
            {
                msg = "Please choose collection option.";
                return;
            }
            CollectionOption collectionOption = delivery ? CollectionOption.Delivery : 0;
            collectionOption |= pickUp ? CollectionOption.PickUp : 0;


            CartOfferDto dto = new()
            {
                Quantity = quantity,
                Username = "",
                CollectionOption = collectionOption,
                OfferId = addToCartPopUpOffer.Id
            };


            await HttpCartClient.AddToCartAsync(dto);
            quantity = 0;
            delivery = false;
            pickUp = false;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        showAddToCartComponent = false;
        StateHasChanged();
    }

    private Task Cancel()
    {
        msg = "";
        quantity = 0;
        delivery = false;
        pickUp = false;
        showAddToCartComponent = false;
        StateHasChanged();
        return Task.CompletedTask;
    }


    private async Task ValidateData()
    {
    }

    ///summary///
    /// sets the delivery boolean to true to simulate 'chosen from the radio'
    /// summary///
    private void Delivery()
    {
        delivery = true;
        pickUp = false;
    }

    ///summary///
    /// sets the pickUp boolean to true to simulate 'chosen from the radio'
    /// summary///
    private void PickUp()
    {
        delivery = false;
        pickUp = true;
    }

    private void CheckDelivery()
    {
        deliveryCheck = !deliveryCheck;
    }
    private void CheckPickUp()
    {
        pickUpCheck = !pickUpCheck;
    }
    private void CheckPickYO()
    {
        pickYOCheck = !pickYOCheck;
    }
    
    


}