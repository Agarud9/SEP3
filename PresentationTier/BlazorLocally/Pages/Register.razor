@page "/Register"
@using global::Shared.DTOs
@using HttpClient.ClientInterfaces
@inject IAuthService AuthService
@inject NavigationManager NavManager


<div class="register-wrapper">
    <div class="register-text">
        Register
    </div>
    <div class="register-body">
        <div class="row">
            <div class="error">
                @errorMessage
            </div>
        </div>
        <div class="row">
            <div class="row-input user-type-choose">
                <div class="user-type-input">
                    <input @onchange="() => isFarmer = true" type="radio" name="user-type-chooser" id="farmer-option">
                    <label for="farmer-option"><span class="farmer-text">Farmer</span></label>
                </div>
                <div class="user-type-input">
                    <input @onchange="() => isFarmer = false" type="radio" name="user-type-chooser" id="customer-option">
                    <label for="customer-option"><span class="customer-text">Customer</span></label>
                </div>
        
            </div>
        </div>
        @if (isFarmer != null)
        {
            <div class="row">
                <div class="row-text">First Name</div>
                <div class="row-input">
                    <input type="text" @bind="firstName">
                </div>
            </div>
            <div class="row">
                <div class="row-text">Last Name</div>
                <div class="row-input">
                    <input type="text" @bind="lastName">
                </div>
            </div>


            <div class="row">
                <div class="row-text">Username</div>
                <div class="row-input">
                    <input type="text" @bind="username">
                </div>
            </div>
            <div class="row">
                <div class="row-text">Password</div>
                <div class="row-input">
                    <input type="password" @bind="password">
                </div>
            </div>
            <div class="row">
                <div class="row-text">Repeat Password</div>
                <div class="row-input">
                    <input type="password" @bind="repeatPassword">
                </div>
            </div>
            @if (!isFarmer.Value)
            {
                <div class="row">
                    <div class="row-text">City</div>
                    <div class="row-input">
                        <input type="text" @bind="city">
                    </div>
                </div>
                <div class="row">
                    <div class="row-text">Street</div>
                    <div class="row-input">
                        <input type="text" @bind="street">
                    </div>
                    <div class="row-text">ZIP</div>
                    <div class="row-input">
                        <input type="text" @bind="zipCode">
                    </div>
                </div>
                <div class="row">
                    <div class="row-text">Phone</div>
                    <div class="row-input position-relative">
                        <label class="directNumber position-absolute" style="left: -15%; top: 8%">+45</label>
                        <input type="text" @bind="phoneNumber">
                    </div>
                </div>
            }

            <div class="row">
                <div class="row-input register-button">
                    <button @onclick="RegisterUser">Register</button>
                </div>
            </div>
            <div class="row">
                <div class="row-login-link">
                    <a href="/LogIn">Log In</a>
                </div>
            </div>
        }
    </div>
</div>

@code {
    bool? isFarmer = null;
    string username = "";
    string firstName = "";
    string lastName = "";
    string password = "";
    string repeatPassword = "";
    string city = "";
    string street = "";
    string zipCode = "";
    string phoneNumber = "";
    string errorMessage = "";

    
    private void TrimUsername()
    {
        username = username.Trim();
    }
    
    private async Task RegisterUser()
    {
        errorMessage = "";

        TrimUsername();
        
        if (isFarmer == false)
        {
            if (city == "" || street == "" || zipCode == "" || phoneNumber == "")
            {
                errorMessage = "All fields must be filled";
                return;
            }
            else if (zipCode.Length != 4 || !int.TryParse(zipCode, out _))
            {
                errorMessage = "ZIP code must be 4 digits";
                return;
            }
            else if (phoneNumber.Length != 8 || !int.TryParse(phoneNumber, out _))
            {
                errorMessage = "Phone number must be 8 digits";
                return;
            }
        }
        if (firstName == "" || lastName == "" || username == "" || password == "" || repeatPassword == "")
        {
            
                
            
            errorMessage = "All fields are required";
            return;
        }
        
        
        if (password != repeatPassword)
        {
            errorMessage = "Passwords do not match";
            return;
        }

        try
        {
            await AuthService.RegisterAsync(firstName, lastName, username, password, isFarmer.Value, city, street, zipCode, phoneNumber);
            NavManager.NavigateTo("/Login");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = e.Message;
        }
    }
}