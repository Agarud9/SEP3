@page "/FarmerOrderView"
@using global::Shared.Models
@using HttpClient.ClientInterfaces
@using C1.Blazor.Core
@using C1.Blazor.Grid
@using C1.Blazor.Input
@inject IOrderService orderService
@inject IUserService userService
<AuthorizeView>
    <div class="title">
        <h1>Orders</h1>
        <div class="error">
            @errorMessage
        </div>
    </div>
    @if (orders == null)
    {
        <span>Loading...</span>
    }
    else if (orders.Any())
    {
        @if (deliveryOrders.Any())
        {
            /* <div class="orders">
                <label>Delivery</label>
                <div class="ordersTable">
                    <table class="mainTable">
                        @foreach (var order in deliveryOrders)
                        {
                            TempOrder temp = new TempOrder
                            {
                                IsOpen = false,
                                Customer = GetCustomer(order.OrderOffers.First().Username).Result
                            };
                            <tr class="BigTableRow">
                                <td class="nameCell">@(temp.Customer.Username)</td>
                                <td class="phoneCell">@(temp.Customer.Address.City)</td>
                                <td class="priceCell">@TotalPrice(order.OrderOffers) dkk</td>
                                <td class="imgCell">
                                    @if (!displayDetails)
                                    {
                                        <img src="Img/upArrow.png" style="transform: rotate(180deg)" @onclick="@(() => temp.IsOpen = true)">
                                    }
                                    else
                                    {
                                        <img src="Img/upArrow.png" @onclick="@(() => temp.IsOpen = false)">
                                    }
                                </td>
                            </tr>
                            if (temp.IsOpen)
                            {
                                <Table>
                                    @foreach (var item in order.OrderOffers)
                                    {
                                        <tr>
                                            <td>@item.Offer.Name</td>
                                            <td class="quantityCell">@item.Quantity</td>
                                        </tr>
                                    }
                                </Table>
                            }
                        }
                    </table>
                </div>
            </div> */
            <FlexGrid ItemsSource="pickUpOrders" IsReadOnly="true" AutoGenerateColumns="false" HeadersVisibility="GridHeadersVisibility.All" VerticalScrollBarVisibility="ScrollBarVisibility.Visible">
                    <FlexGridColumns>
                        <GridColumn Binding="Id"></GridColumn>
                        <GridColumn Binding="FarmName"></GridColumn>
                        <GridColumn></GridColumn>
                    </FlexGridColumns>
                    <FlexGridBehaviors>
                        <FlexGridDetailProvider TItem="Order" Height="250" DetailVisibilityMode="@GridDetailVisibilityMode.ExpandMultiple">
                            @foreach (var item in @context.OrderOffers)
                            {
                                <div>
                                    <div>@item.Offer.Name</div>
                                    <div>@item.Quantity</div>
                                </div>
                            }
                        </FlexGridDetailProvider>
                    </FlexGridBehaviors>
                </FlexGrid>
            /* @if (pickUpOrders.Any())
        {
            <div class="orders">
                <label>Pick Up</label>
                <div class="ordersTable">
                    <table class="mainTable">
                        @foreach (var order in pickUpOrders)
                        {
                            TempOrder temp = new TempOrder
                            {
                                IsOpen = false,
                                Customer = GetCustomer(order.OrderOffers.First().Username).Result
                            };
                            <tr class="BigTableRow">
                                <td class="nameCell">@(temp.Customer.Username)</td>
                                <td class="farmNameCell">@(order.FarmName)</td>
                                <td class="priceCell">@TotalPrice(order.OrderOffers) dkk</td>
                                <td class="imgCell" @onclick="() => temp.IsOpen = !temp.IsOpen">
                                    @if (!temp.IsOpen)
                                    {
                                        <img src="Img/upArrow.png" style="transform: rotate(180deg)" @onclick="@(() => temp.IsOpen = true)">
                                    }
                                    else
                                    {
                                        <img src="Img/upArrow.png" @onclick="@(() => temp.IsOpen = false)">
                                    }
                                </td>
                            </tr>
                            if (temp.IsOpen)
                            {
                                <Table>
                                    <tr class="AddressRow">
                                        @GetFarmByName(order.FarmName).Address.ToString();
                                    </tr>
                                    @foreach (var item in order.OrderOffers)
                                    {
                                        <tr>
                                            <td>@item.Offer.Name</td>
                                            <td class="QuantityCell">@item.Quantity</td>
                                        </tr>
                                    }
                                </Table>
                            }
                        }
                    </table>
                </div>
            </div>*/
    }
    }
</AuthorizeView>


@code {
    private IEnumerable<Order>? orders;
    private List<Order> deliveryOrders = new List<Order>();
    private List<Order> pickUpOrders = new List<Order>();
    private string msg = "";
    private string username;
    private bool displayDetails;
    string errorMessage = "";


    /*class TempOrder
    {
        public bool IsOpen { get; set; }
        public Order Order { get; set; }
        public Customer Customer { get; set; }
    }*/

    protected override async Task OnInitializedAsync()
    {
    //var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    //var principal = authstate.User;
    //username = (from claim in principal.Claims where claim.Type == "Username" select claim.Value).FirstOrDefault();

        username = "Agata";
        try
        {
            orders = await orderService.GetAllOrdersAsync(username);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }

        foreach (var order in orders)
        {
            if (order.CollectionOption.Equals("Delivery"))
            {
                deliveryOrders.Add(order);
            }
            else if (order.CollectionOption.Equals("PickUp"))
            {
                pickUpOrders.Add(order);
            }
        }
    }

    private string GetCustomerUsername(OrderOffer orderOffer)
    {
        return orderOffer.Username;
    }

    private async Task<Customer> GetCustomer(string customerUsername)
    {
        errorMessage = "";
        try
        {
            Customer c = await userService.GetCustomer(customerUsername);
            return c;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = e.Message;
            throw;
        }
    }


    private Farm GetFarmByName(string farmName)
    {
    //TODO implement GetFarmByName
        Address address = new Address
        {
            City = "Horsens",
            Street = "Nygade",
            ZIP = "8700",
        };
        Farm farm = new Farm
        {
            Address = address,
            DeliveryDistance = 15,
            Name = "HappyFarm",
            Phone = "+4582785463"
        };

        return farm;
    }

    private double TotalPrice(List<OrderOffer> items)
    {
        double totalPrice = 0;
        for (int i = 0; i < items.Count; i++)
        {
            totalPrice += items[i].Quantity * items[i].Offer.Price;
        }

        return totalPrice;
    }

}