@page "/DisplayFarms"
@using global::Shared.Models
@using HttpClient.ClientInterfaces
@inject IFarmService farmHttpClient;

<div class="text">
    <h3 class="yourFarmsText">YOUR FARMS</h3>
</div>

@if (farms == null)
{
    <p>
        <em>You do not have farms.</em>
    </p>
}
<div class="d-flex justify-content-around flex-wrap">
@if (farms != null)
{
    @foreach (var farm in farms)
        {
            
            <div class="card mb-3" style="max-width: 400px;">
            <a href="FarmOverview/@farm.Name" class="farm-link">
                    <div class="row no-gutters">
                        <div class="col-md-4">
                            <img src="@farm.FarmIcon.AbsoluteUrl" alt="farmImage"/>
                        </div>
                        <div class="col-md-6">
                            <div class="text-center">
                                <h2 class="card-text">@farm.Name</h2>
                            </div>
                        </div>
                    </div>
                    </a>
                    <i @onclick="()=> DisableFarm(farm.Name)" class="fa-solid fa-square-xmark fa-2xl position-absolute" style="right: -2%; cursor: pointer"></i>
                </div>
            
        }
}

<a href="/AddFarm" class="addFarm">
    <div class="card mb-2" style="max-width: 200px;">
        <div class="row no-gutters">
            <div class="col-md-4">
                <img src="Img/plus.png" alt="addFarmImage"/>
            </div>
            <div class="col-md-5">
                <div class="text-center">
                    <h6 class="card-text">Add a farm here</h6>
                </div>
            </div>
        </div>
    </div>
</a>

</div>
  
@code {
    private IEnumerable<Farm>? farms;
    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            farms = await farmHttpClient.GetAllFarmsByFarmerAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task DisableFarm(string farmName)
    {
        await farmHttpClient.DisableAsync(farmName);
        await OnInitializedAsync();
    }

}