@page "/CustomerCart"
@attribute [Authorize(Roles = "customer")] 

@using global::Shared.Models
@using HttpClient.ClientInterfaces
@inject ICartService cartService;
@inject IOrderService orderService;

<div class="greeting">
    <h4>YOUR SHOPPING CART</h4>
</div>

@if (cartOffers == null)
{
    <p>
        <em>Currently you have no cart items. For discovering for offers please go to 
            <NavLink class="nav-link" href="DisplayOffers">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Our Offers
            </NavLink>
        </em>
    </p>
}

@if (cartOffers != null)
{
    <button class="removeAllBtn" @onclick="RemoveAll">EMPTY CART</button>
	 
    <table class="table">
        <thead>
        <tr>
            <th>QTY</th>
            <th>Item</th>
            <th>Collect Option</th>
            <th>Farm</th>
            <th>Price</th>
            <th>Remove</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var cartOff in cartOffers)
        {
            <tr>
            <td>@cartOff.Quantity</td>
            <td>@cartOff.Offer.Name</td>
            <td>@cartOff.CollectionOption</td>
            <td>@cartOff.Offer.FarmName</td>
            <td>@cartOff.Offer.Price</td>
                <td>
                    <label @onclick=
                           "@(() => RemoveTodo(@cartOff.Id))" style="cursor:pointer; color: red; font-weight: bold">
                                            @*A cross icon*@
                                            &#x2717;
                    </label>
                </td>
                </tr>
        }
        </tbody>
    </table>
	
    <div class="totalPrice"><strong>Total price: @totalPrice DKK </strong> 
        <button class="orderBtn" @onclick="Order">ORDER NOW</button></div>
}

@code {
    private IEnumerable<CartOffer>? cartOffers;
    private IEnumerable<Offer> offers;
    private string msg = "";
    private double totalPrice;

    private string? username;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cartOffers = await cartService.GetAllCartItemsAsync("customer");
            Console.WriteLine("The cart offers received: " + cartOffers);

            foreach (var cartOffer in cartOffers)
            {
                totalPrice += (cartOffer.Offer.Price*cartOffer.Quantity);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task RemoveAll()
    {
        await cartService.DeleteAllCartOffersAsync("customer");
        cartOffers = null;
    }

    private async Task Order()
    {
        await orderService.CreateOrderAsync();
    }

    private async void RemoveTodo(int cartItemId)
    {
        try
        {

            <!--Removing the cart items from the view-->
            var list = new List<CartOffer>(cartOffers!);
            list.RemoveAll(cartItem => cartItem.Id == cartItemId);
            cartOffers = list.AsEnumerable();
            await cartService.DeleteCartOfferAsync(cartItemId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

}