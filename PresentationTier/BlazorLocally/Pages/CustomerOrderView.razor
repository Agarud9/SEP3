@page "/CustomerOrderView"
@attribute [Authorize(Roles = "customer")]

@using global::Shared.Models
@using HttpClient.ClientInterfaces
@inject IOrderService orderService
@inject IFarmService farmService
@inject NavigationManager navMgr;


    <div class="text">
        <h3 class="ordersText">Orders</h3>
    </div> 

    @if (orders == null)
    {
        <span>You don't have any orders yet.</span>
    }
    else if (orders.Any())
    {
        @if (pickUpOrders.Any())
        {
            <div class="orders">
                <label>Pick Up</label>
                <div class="ordersTable">
                    @foreach (var order in pickUpOrders)
                    {
                        <div class="rowDiv">
                            <div class="nameCell">@order.FarmName</div>
                            <div class="phoneCell">(+45) @farms[order.FarmName].Phone</div>
                            <div class="priceCell">@TotalPrice(order.OrderOffers) dkk</div>
                             <div class="deleteCell"><button class="btn btn-danger" onclick="@(async () => await DeleteOrder(order.Id))">DELETE</button></div>
                            <div class="imgCell" onclick="this.parentElement.classList.toggle('details')">
                                <img src="Img/downArrow.png">
                            </div>
                        </div>
                            <Table class="detailTable">
                            <th class="AddressRow">
                                @farms[order.FarmName].Address.ToString()
                            </th>
                            @foreach (var item in order.OrderOffers)
                            {
                                <tr>
                                    <td>@item.Offer.Name</td>
                                    <td class="QuantityCell">@item.Quantity</td>
                                </tr>
                            }
                        </Table>
                        }
                </div>
            </div>
        }
        @if (deliveryOrders.Any())
        {
            <div class="orders">
                <label>Delivery</label>
                <div class="ordersTable">
                    @foreach (var order in deliveryOrders)
                    {
                        <div class="rowDiv">
                            <div class="nameCell">@order.FarmName</div>
                            <div class="phoneCell">(+45) @farms[order.FarmName].Phone</div>
                            <div class="priceCell">@TotalPrice(order.OrderOffers) dkk</div>
                             <div class="deleteCell"><button class="btn btn-danger" onclick="@(async () => await DeleteOrder(order.Id))">DELETE</button></div>
                            <div class="imgCell" onclick="this.parentElement.classList.toggle('details')">
                                <img src="Img/downArrow.png">
                            </div>
                        </div>
                        <Table class="detailTable">
                            <th></th>
                            @foreach (var item in order.OrderOffers)
                            {
                                <tr>
                                    <td>@item.Offer.Name</td>
                                    <td class="QuantityCell">@item.Quantity</td>
                                </tr>
                            }
                        </Table>
                    }
                </div>
            </div>
        }
    }

@code {
    
    private ICollection<Order>? orders;
    private List<Order> deliveryOrders = new();
    private List<Order> pickUpOrders = new();
    private string msg = "";
    private string username;
    private Dictionary<string,Farm> farms = new ();

    protected override async Task OnInitializedAsync()
    {
        try
        {
           var ordersToGet = await orderService.GetAllOrdersAsync();

            if (ordersToGet != null)
            {
                List<string> farmNames = new();
                foreach (var order in ordersToGet)
                {
                    farmNames.Add(order.FarmName);
                }
                foreach (var farmName in farmNames)
                {
                    if (!farms.ContainsKey(farmName))
                    { 
                        Farm farm = await farmService.GetFarmByNameAsync(farmName);
                        farms.Add(farmName,farm);
                    }
                }
                 foreach (var order in ordersToGet)
                 {
                     Console.WriteLine("order delivery: " + order.CollectionOption);
                     if (order.CollectionOption == CollectionOption.Delivery)
                     {
                         deliveryOrders.Add(order);
                     }
                     else if(order.CollectionOption == CollectionOption.PickUp)
                     {
                         pickUpOrders.Add(order);
                     }
                 }
            }

            orders = ordersToGet;

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }

    }
    

    private double TotalPrice(List<OrderOffer> items)
    {
        double totalPrice = 0;
        for (int i = 0; i < items.Count; i++)
        {
            totalPrice += items[i].Quantity * items[i].Offer.Price;
        }

        return totalPrice;
    }
    
    private async Task DeleteOrder(int id)
    {
        await orderService.DeleteOrderAsync(id);
        navMgr.NavigateTo(navMgr.Uri, forceLoad: true);
    }

}
