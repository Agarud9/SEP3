@page "/CreateOffer"
@attribute [Authorize(Roles = "farmer")] 

@using global::Shared.DTOs
@inject IOfferService httpClient
@using HttpClient.ClientInterfaces
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable


<h3>CreateOffer</h3>
<div class="form d-flex flex-wrap flex-column">
    <div style="color: red">@errorMessage</div>
    <div class="col-6">
        <label>Product Name <span class="required">*</span></label>
        <input type="text" @bind="productName" required="required"/>
    </div>

    <!--image-->
    <div class="col-3 d-flex justify-content-end" style="position: absolute; right: 0">
        <div class=" d-flex flex-column">
            <img id="image" src="Img/sample-offer.png" alt="default" width="200px" height="auto" class="img col-3 me-4"/>
            @*<input type="file" id="offerImg" accept="image/png, image/jpeg, image/jpg" class="col-3 me-4"/>*@
            <InputFile OnChange="GetImage"></InputFile>
        </div>
    </div>

    <div class="col-6">
        <label>Quantity <span class="required">*</span></label>

        <div class="col-9 d-flex flex-nowrap">
            <input type="text" @bind="quantity" required="required"/>
            <!--dropdown menu-->
            <div class="dropdown col-2 ms-1">
                <button onclick="@(() => DropDownVisible())" class="dropbtn">@unit</button>
                <div id="myDropdown" class="dropdown-content" style="display: @displayDropdown">
                    <span onclick="@(() => SetUnit("kg"))">kg</span>
                    <span onclick="@(() => SetUnit("l"))">l</span>
                </div>
            </div>
        </div>
    </div>




    <div class="col-6">
        <label>Price <span class="required">*</span></label>
        <input type="text" @bind="price" required="required"/>
    </div>

    <!--radio buttons for delivery option-->
    <label class="col-6" for="radioGroup">Delivery Option:</label>
    <div id="radioGroup" class="d-flex flex-column">
        <div class="col-4 d-flex flex-nowrap">
            <input type="radio" value="@delivery" id="delivery" name="deliveryOption" class="me-2"
                   onchange="@(() => Delivery())"
                   checked="@delivery"/>
            <label for="delivery"> Delivery</label>
        </div>
        <div class="col-4 d-flex flex-nowrap">
            <input type="radio" value="@pickUp" id="pickUp" name="deliveryOption" class="me-2"
                   onchange="@(() => PickUp())"/>
            <label for="pickUp"> Pick Up</label>
        </div>
        <div class="col-4 d-flex flex-nowrap">
            <input type="radio" value="@pickYO" id="pickYO" name="deliveryOption" class="me-2"
                   onchange="@(() => PickYO())"/>
            <label for="pickYO"> Pick Your Own</label>
        </div>

    </div>
    <!--textarea for description-->
    <label for="textarea">Description:</label>
    <textarea id="textarea" name="textarea" placeholder="Quality, Detailed Information ..." @bind="description"></textarea>

    <!--submit button-->
    <input type="submit" value="CREATE" class="button btn-success" onclick="@Create"/>

</div>

@code {
    private string productName = "";
    private int quantity;
    private string unit = "kg";
    private int price;
    private bool delivery = true;
    private bool pickUp;
    private bool pickYO;
    private string description = "";
    private string displayDropdown = "none";
    private string errorMessage = "";

    private IBrowserFile? file;
    private string? blobUri;
    private Lazy<IJSObjectReference> ExampleModule = new();


    private async Task GetImage(InputFileChangeEventArgs args)
    {
        file = args.File;

        var dotnetImageStream = new DotNetStreamReference(file.OpenReadStream(15_000_000L));
        await JSRuntime.InvokeVoidAsync("setImage", "image", dotnetImageStream);
    }


    ///summary///
    /// calls methods ValidateData for data validation and CreateAsync from HttpClient
    /// summary///
    private async Task Create()
    {
        try
        {
            errorMessage = "";
            
            if (file is null)
            {
                errorMessage = "No image selected;";
                return;
            }
            
            OfferCreationDto dto = new()
            {
                Name = productName,
                Quantity = quantity,
                Unit = unit,
                Price = price,
                Delivery = delivery,
                PickUp = pickUp,
                PickYourOwn = pickYO,
                Description = description,
                FarmName = "Jakobs farm"
            };

            try
            {
                var offer = await httpClient.CreateAsync(dto);
                if (offer is not null)
                    await httpClient.UploadImageAsync(file, offer.Id);
            }
            catch (Exception e)
            {
                errorMessage = e.Message;
            }
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    ///summary///
    /// sets the delivery boolean to true to simulate 'chosen from the radio'
    /// summary///
    private void Delivery()
    {
        delivery = true;
        pickUp = false;
        pickYO = false;
    }
    
    ///summary///
    /// sets the pickUp boolean to true to simulate 'chosen from the radio'
    /// summary///
    private void PickUp()
    {
        delivery = false;
        pickUp = true;
        pickYO = false;
    }
    
    ///summary///
    /// sets the pickYO boolean to true to simulate 'chosen from the radio'
    /// summary///
    private void PickYO()
    {
        delivery = false;
        pickUp = false;
        pickYO = true;
    }

    ///summary///
    /// sets variable unit 
    /// summary///
    private void SetUnit(string unit)
    {
        this.unit = unit;
    }

    ///summary///
    /// displays or hides the drop down menu based on the current value 
    /// summary///
    private void DropDownVisible()
    {
        displayDropdown = displayDropdown.Equals("none") ? "block" : "none";
    }

    ///summary///
    /// validates inputted data
    /// summary///
    private void ValidateData()
    {
        //check if required fields are empty nothing too bad
    }

    public async ValueTask DisposeAsync()
    {
        if(ExampleModule.IsValueCreated)
        {
            await ExampleModule.Value.DisposeAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        ExampleModule = new(await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/CreateOffer.razor.js"));
    }

}