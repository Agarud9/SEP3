@page "/FarmOverview/{FarmName}"
@attribute [Authorize(Roles = "farmer")] 

@using global::Shared.Models
@using HttpClient.ClientInterfaces
@using global::Shared.DTOs
@inject IFarmService farmHttpClient;
@inject IOfferService offerHttpClient;
@using Components
@inject NavigationManager navMgr;


<div id="shape">
    <div id="circle">
        <img id="farmImg" src="@Farm?.FarmIcon?.AbsoluteUrl" height="180" width="180">
    </div>
    <div id="rectangle">
        <label id="farmName">@FarmName</label>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-4" id="reviews" style="display: flex; justify-content: center">
            <Reviews FarmName="@FarmName"></Reviews>
        </div>
            
        <div class="col-4" id="status">
            <h5 id="statusLabel">Status:</h5>
             <input type="text"  id="statusText" @bind="updatedStatus" placeholder="@Farm?.FarmStatus">
        </div>

        <div class="col-4" id="updateContainer">
            <div id="phone">
                <p id="phoneLabel">Phone number:</p>
                <div class="row">
                    <div class="col-5">
                        <input id="phoneText" type="text" @bind="updatedPhone"  placeholder="@Farm?.Phone"></div>
                    <p id="addressLabel">@Farm?.Address</p>
                </div>
                </div>
        </div>
    </div>
    <div class="row"> 
        <div class="col-4" id="errorMessageContainer">
             <label>@msg</label>
        </div>
        <div class="col-2 d-flex justify-content-end" id="updateButtonContainer">
            <AuthorizeView Roles="farmer">
                <button id="updateButton" @onclick="updateFarm">Update</button>
            </AuthorizeView>
        </div>
      
    </div>
</div>

@if (offers == null)
{
    <p>
        <em>Loading offers...</em>
    </p>
}

@if (offers != null)
{
    <div class="d-flex justify-content-around flex-wrap" id="ordersContainer">
        @foreach (var offer in offers)
        {
            <div class="card col-5 m-3 position-relative">
                <div class="card-header">
                    <img src="@offer.Image.AbsoluteUrl" alt="offerImage" class="center card-img"/>
                </div>
                <div class="card-body d-flex justify-content-between flex-wrap">
                    <h5 class="col-8">@offer.Name</h5>
                    <h6 class="col-4 d-flex justify-content-end">Price: @offer.Price dkk</h6>
                    <span class="col-8">@offer.Description</span>
                    <h6 class="col-4 d-flex justify-content-end">Unit: @offer.Unit</h6>
                </div>
                <i @onclick="()=> DisableOffer(offer.Id)" class="fa-solid fa-square-xmark fa-2xl position-absolute" style="right: -2%; cursor: pointer"></i>
            </div>
        }
    </div>}
<div class="addOffer">
<a href="CreateOffer/@FarmName"><div class="buttonContainer"><button id="addButton">ADD OFFER</button></div></a>
</div>

@code {
    //get the farm from the previous view
    [Parameter]
    public string FarmName { get; set; }
    
    private Farm Farm { get; set; }
    private IEnumerable<Offer> offers { get; set; }
    private string? updatedStatus;
    private string? updatedPhone;
    private string msg;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Farm = await farmHttpClient.GetFarmByNameAsync(FarmName);
            updatedPhone = Farm.Phone;
            offers = await offerHttpClient.GetAsync(FarmName);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }


    private async Task updateFarm()
    {
        if (updatedPhone?.Length != 8 ||  !int.TryParse(updatedPhone, out _))
        {
            msg = "Phone number must be 8 digits. Ex: 12345678";
            return;
        }
        
        var dto = new FarmUpdateDto
        {
            FarmStatus = updatedStatus ?? Farm.FarmStatus,
            FarmPhone = updatedPhone ?? Farm.Phone,
            Name = FarmName,
        };

        try
        {
            await farmHttpClient.UpdateAsync(dto);
            navMgr.NavigateTo(navMgr.Uri, forceLoad: true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task DisableOffer(int offerId)
    {
        await offerHttpClient.DisableAsync(offerId);
        await OnInitializedAsync();
    }

}